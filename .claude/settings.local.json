{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(python3 -c \"import pandas as pd; import openpyxl; wb = openpyxl.load_workbook(''/mnt/c/Users/Alexis/Downloads/Archivos HISMINSA/consolidado 01-07-2025 al 03-07-2025/codigos_descripcion.xlsx''); print(''Hojas en el archivo:''); print(wb.sheetnames)\")",
      "Bash(python3 -c \"\nimport xml.etree.ElementTree as ET\nimport zipfile\nimport os\n\n# Un archivo xlsx es básicamente un archivo zip\nxlsx_path = ''/mnt/c/Users/Alexis/Downloads/Archivos HISMINSA/consolidado 01-07-2025 al 03-07-2025/codigos_descripcion.xlsx''\n\ntry:\n    with zipfile.ZipFile(xlsx_path, ''r'') as z:\n        # Listar archivos en el zip\n        print(''Archivos dentro del XLSX:'')\n        for file in z.namelist():\n            print(f''  {file}'')\n        \n        # Leer workbook.xml para obtener las hojas\n        if ''xl/workbook.xml'' in z.namelist():\n            with z.open(''xl/workbook.xml'') as f:\n                tree = ET.parse(f)\n                root = tree.getroot()\n                \n                # Buscar las hojas\n                sheets = []\n                for elem in root.iter():\n                    if ''sheet'' in elem.tag:\n                        name = elem.get(''name'')\n                        if name:\n                            sheets.append(name)\n                \n                print(''\\nHojas encontradas:'')\n                for sheet in sheets:\n                    print(f''  - {sheet}'')\n                    \nexcept Exception as e:\n    print(f''Error: {e}'')\n\")",
      "Bash(python3 -c \"\nimport xml.etree.ElementTree as ET\nimport zipfile\nimport re\n\nxlsx_path = ''/mnt/c/Users/Alexis/Downloads/Archivos HISMINSA/consolidado 01-07-2025 al 03-07-2025/codigos_descripcion.xlsx''\n\ndef get_shared_strings(z):\n    ''''''Obtener las cadenas compartidas del archivo Excel''''''\n    strings = []\n    if ''xl/sharedStrings.xml'' in z.namelist():\n        with z.open(''xl/sharedStrings.xml'') as f:\n            tree = ET.parse(f)\n            root = tree.getroot()\n            for si in root.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}si''):\n                t = si.find(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}t'')\n                if t is not None and t.text:\n                    strings.append(t.text)\n    return strings\n\ndef read_sheet_data(z, sheet_path, shared_strings, max_rows=10):\n    ''''''Leer datos de una hoja específica''''''\n    with z.open(sheet_path) as f:\n        tree = ET.parse(f)\n        root = tree.getroot()\n        \n        data = {}\n        row_count = 0\n        \n        # Buscar todas las celdas\n        for row in root.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}row''):\n            row_num = int(row.get(''r'', ''0''))\n            if row_num > max_rows:\n                break\n            row_count += 1\n            \n            for cell in row.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}c''):\n                cell_ref = cell.get(''r'', '''')\n                cell_type = cell.get(''t'', '''')\n                \n                # Extraer columna y fila\n                match = re.match(r''([A-Z]+)(\\d+)'', cell_ref)\n                if match:\n                    col = match.group(1)\n                    row = int(match.group(2))\n                    \n                    # Obtener el valor\n                    v_elem = cell.find(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}v'')\n                    if v_elem is not None and v_elem.text:\n                        if cell_type == ''s'':  # String compartida\n                            idx = int(v_elem.text)\n                            if idx < len(shared_strings):\n                                value = shared_strings[idx]\n                            else:\n                                value = f''[String index {idx}]''\n                        else:\n                            value = v_elem.text\n                        \n                        if row not in data:\n                            data[row] = {}\n                        data[row][col] = value\n        \n        return data, row_count\n\ntry:\n    with zipfile.ZipFile(xlsx_path, ''r'') as z:\n        # Obtener strings compartidas\n        shared_strings = get_shared_strings(z)\n        print(f''Total de strings compartidas: {len(shared_strings)}'')\n        \n        # Analizar la primera hoja (CIE_DESCRIPCION)\n        print(''\\n=== Hoja: CIE_DESCRIPCION ==='')\n        data, total_rows = read_sheet_data(z, ''xl/worksheets/sheet1.xml'', shared_strings)\n        \n        # Mostrar las primeras filas\n        print(f''Primeras filas (de {total_rows} leídas):'')\n        for row_num in sorted(data.keys())[:10]:\n            print(f''\\nFila {row_num}:'')\n            row_data = data[row_num]\n            for col in sorted(row_data.keys()):\n                print(f''  {col}: {row_data[col][:50]}...'' if len(row_data[col]) > 50 else f''  {col}: {row_data[col]}'')\n                \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(python3 -c \"\nimport xml.etree.ElementTree as ET\nimport zipfile\nimport re\n\nxlsx_path = ''/mnt/c/Users/Alexis/Downloads/Archivos HISMINSA/consolidado 01-07-2025 al 03-07-2025/codigos_descripcion.xlsx''\n\ndef get_shared_strings(z):\n    ''''''Obtener las cadenas compartidas del archivo Excel''''''\n    strings = []\n    if ''xl/sharedStrings.xml'' in z.namelist():\n        with z.open(''xl/sharedStrings.xml'') as f:\n            tree = ET.parse(f)\n            root = tree.getroot()\n            for si in root.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}si''):\n                t = si.find(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}t'')\n                if t is not None and t.text:\n                    strings.append(t.text)\n    return strings\n\ndef read_sheet_headers(z, sheet_path, shared_strings):\n    ''''''Leer solo los encabezados de una hoja''''''\n    with z.open(sheet_path) as f:\n        tree = ET.parse(f)\n        root = tree.getroot()\n        \n        headers = {}\n        \n        # Buscar la primera fila\n        for row in root.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}row''):\n            row_num = int(row.get(''r'', ''0''))\n            if row_num == 1:  # Solo la primera fila\n                for cell in row.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}c''):\n                    cell_ref = cell.get(''r'', '''')\n                    cell_type = cell.get(''t'', '''')\n                    \n                    # Extraer columna\n                    match = re.match(r''([A-Z]+)(\\d+)'', cell_ref)\n                    if match:\n                        col = match.group(1)\n                        \n                        # Obtener el valor\n                        v_elem = cell.find(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}v'')\n                        if v_elem is not None and v_elem.text:\n                            if cell_type == ''s'':  # String compartida\n                                idx = int(v_elem.text)\n                                if idx < len(shared_strings):\n                                    value = shared_strings[idx]\n                                else:\n                                    value = f''[String index {idx}]''\n                            else:\n                                value = v_elem.text\n                            headers[col] = value\n                break\n        \n        return headers\n\ntry:\n    with zipfile.ZipFile(xlsx_path, ''r'') as z:\n        # Obtener strings compartidas\n        shared_strings = get_shared_strings(z)\n        \n        # Información de las hojas\n        sheets_info = [\n            (''CIE_DESCRIPCION'', ''xl/worksheets/sheet1.xml''),\n            (''ESTABLECIMIENTO_DESCRIPCION'', ''xl/worksheets/sheet2.xml''),\n            (''UPS_DESCRIPCION'', ''xl/worksheets/sheet3.xml''),\n            (''ETNIA_DESCRIPCION'', ''xl/worksheets/sheet4.xml'')\n        ]\n        \n        print(''=== ESTRUCTURA DE CADA HOJA ===\\n'')\n        \n        for sheet_name, sheet_path in sheets_info:\n            print(f''\\nHoja: {sheet_name}'')\n            print(''-'' * 40)\n            \n            headers = read_sheet_headers(z, sheet_path, shared_strings)\n            \n            print(''Columnas:'')\n            for col in sorted(headers.keys()):\n                print(f''  {col}: {headers[col]}'')\n            \n            # Contar filas totales\n            with z.open(sheet_path) as f:\n                content = f.read()\n                row_count = content.count(b''<row '')\n                print(f''\\nTotal de filas aproximadas: {row_count}'')\n                \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(python3 -c \"\nimport xml.etree.ElementTree as ET\nimport zipfile\nimport re\n\nxlsx_path = ''/mnt/c/Users/Alexis/Downloads/Archivos HISMINSA/consolidado 01-07-2025 al 03-07-2025/codigos_descripcion.xlsx''\n\ndef get_shared_strings(z):\n    strings = []\n    if ''xl/sharedStrings.xml'' in z.namelist():\n        with z.open(''xl/sharedStrings.xml'') as f:\n            tree = ET.parse(f)\n            root = tree.getroot()\n            for si in root.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}si''):\n                t = si.find(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}t'')\n                if t is not None and t.text:\n                    strings.append(t.text)\n    return strings\n\ndef check_data_samples(z, sheet_path, shared_strings, sheet_name, sample_rows=[2, 3, 4]):\n    print(f''\\n=== {sheet_name} - Muestras de datos ==='')\n    \n    with z.open(sheet_path) as f:\n        tree = ET.parse(f)\n        root = tree.getroot()\n        \n        rows_found = 0\n        \n        for row in root.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}row''):\n            row_num = int(row.get(''r'', ''0''))\n            if row_num in sample_rows:\n                rows_found += 1\n                print(f''\\nFila {row_num}:'')\n                \n                row_data = {}\n                for cell in row.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}c''):\n                    cell_ref = cell.get(''r'', '''')\n                    cell_type = cell.get(''t'', '''')\n                    \n                    match = re.match(r''([A-Z]+)(\\d+)'', cell_ref)\n                    if match:\n                        col = match.group(1)\n                        \n                        v_elem = cell.find(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}v'')\n                        if v_elem is not None and v_elem.text:\n                            if cell_type == ''s'':\n                                idx = int(v_elem.text)\n                                if idx < len(shared_strings):\n                                    value = shared_strings[idx]\n                                else:\n                                    value = f''[String index {idx}]''\n                            else:\n                                value = v_elem.text\n                            \n                            # Verificar si hay problemas de encoding\n                            if any(ord(c) > 127 for c in value):\n                                print(f''  {col}: {value} [CONTIENE CARACTERES NO ASCII]'')\n                            else:\n                                print(f''  {col}: {value}'')\n                \n                if rows_found >= len(sample_rows):\n                    break\n\ntry:\n    with zipfile.ZipFile(xlsx_path, ''r'') as z:\n        shared_strings = get_shared_strings(z)\n        \n        # Verificar muestras de cada hoja\n        sheets = [\n            (''CIE_DESCRIPCION'', ''xl/worksheets/sheet1.xml''),\n            (''ESTABLECIMIENTO_DESCRIPCION'', ''xl/worksheets/sheet2.xml''),\n            (''UPS_DESCRIPCION'', ''xl/worksheets/sheet3.xml''),\n            (''ETNIA_DESCRIPCION'', ''xl/worksheets/sheet4.xml'')\n        ]\n        \n        for sheet_name, sheet_path in sheets:\n            check_data_samples(z, sheet_path, shared_strings, sheet_name)\n            \n        # Verificar algunos strings compartidos con caracteres especiales\n        print(''\\n\\n=== ANÁLISIS DE CARACTERES ESPECIALES ==='')\n        special_chars_count = 0\n        examples = []\n        \n        for i, s in enumerate(shared_strings[:1000]):  # Revisar los primeros 1000\n            if any(ord(c) > 127 for c in s):\n                special_chars_count += 1\n                if len(examples) < 5:\n                    # Mostrar el string y sus caracteres problemáticos\n                    problematic = [(c, ord(c)) for c in s if ord(c) > 127]\n                    examples.append({\n                        ''original'': s[:50] + ''...'' if len(s) > 50 else s,\n                        ''chars'': problematic[:5]\n                    })\n        \n        print(f''\\nTotal de strings con caracteres especiales: {special_chars_count} de {min(1000, len(shared_strings))} revisados'')\n        print(''\\nEjemplos de problemas:'')\n        for ex in examples:\n            print(f\"\"\\n  String: ''{ex[''original'']}''\"\")\n            print(f\"\"  Caracteres problemáticos: {ex[''chars'']}\"\")\n            \nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(python3 -c \"\n# Vamos a ver específicamente qué códigos tienen espacios al final\nimport xml.etree.ElementTree as ET\nimport zipfile\n\nxlsx_path = ''/mnt/c/Users/Alexis/Downloads/Archivos HISMINSA/consolidado 01-07-2025 al 03-07-2025/codigos_descripcion.xlsx''\n\ndef get_shared_strings(z):\n    strings = []\n    if ''xl/sharedStrings.xml'' in z.namelist():\n        with z.open(''xl/sharedStrings.xml'') as f:\n            tree = ET.parse(f)\n            root = tree.getroot()\n            for si in root.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}si''):\n                t = si.find(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}t'')\n                if t is not None and t.text:\n                    strings.append(t.text)\n    return strings\n\ndef check_trailing_spaces(z, sheet_path, shared_strings, sheet_name, max_rows=20):\n    print(f''\\n=== {sheet_name} - Verificando espacios al final ==='')\n    \n    with z.open(sheet_path) as f:\n        tree = ET.parse(f)\n        root = tree.getroot()\n        \n        spaces_found = 0\n        examples = []\n        \n        for row in root.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}row''):\n            row_num = int(row.get(''r'', ''0''))\n            if row_num > max_rows and len(examples) >= 5:\n                break\n                \n            for cell in row.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}c''):\n                cell_ref = cell.get(''r'', '''')\n                cell_type = cell.get(''t'', '''')\n                \n                if ''A'' in cell_ref:  # Solo columna A (códigos)\n                    v_elem = cell.find(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}v'')\n                    if v_elem is not None and v_elem.text:\n                        if cell_type == ''s'':\n                            idx = int(v_elem.text)\n                            if idx < len(shared_strings):\n                                value = shared_strings[idx]\n                            else:\n                                continue\n                        else:\n                            value = v_elem.text\n                        \n                        # Verificar espacios al final\n                        if value != value.rstrip():\n                            spaces_found += 1\n                            if len(examples) < 5:\n                                examples.append({\n                                    ''row'': row_num,\n                                    ''value'': repr(value),  # usar repr para ver espacios\n                                    ''trimmed'': repr(value.rstrip())\n                                })\n        \n        print(f''Códigos con espacios al final encontrados: {spaces_found}'')\n        if examples:\n            print(''\\nEjemplos:'')\n            for ex in examples:\n                print(f\"\"  Fila {ex[''row'']}: {ex[''value'']} -> {ex[''trimmed'']}\"\")\n\ntry:\n    with zipfile.ZipFile(xlsx_path, ''r'') as z:\n        shared_strings = get_shared_strings(z)\n        \n        # Solo verificar CIE_DESCRIPCION que es donde parece estar el problema\n        check_trailing_spaces(z, ''xl/worksheets/sheet1.xml'', shared_strings, ''CIE_DESCRIPCION'')\n        \nexcept Exception as e:\n    print(f''Error: {e}'')\n\")",
      "Bash(python3 -c \"\n# Vamos a ver específicamente qué códigos tienen espacios al final\nimport xml.etree.ElementTree as ET\nimport zipfile\n\nxlsx_path = ''/mnt/c/Users/Alexis/Downloads/Archivos HISMINSA/consolidado 01-07-2025 al 03-07-2025/codigos_descripcion.xlsx''\n\ndef get_shared_strings(z):\n    strings = []\n    if ''xl/sharedStrings.xml'' in z.namelist():\n        with z.open(''xl/sharedStrings.xml'') as f:\n            tree = ET.parse(f)\n            root = tree.getroot()\n            for si in root.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}si''):\n                t = si.find(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}t'')\n                if t is not None and t.text:\n                    strings.append(t.text)\n    return strings\n\ndef check_trailing_spaces(z, sheet_path, shared_strings, sheet_name, max_rows=20):\n    print(f''\\n=== {sheet_name} - Verificando espacios al final ==='')\n    \n    with z.open(sheet_path) as f:\n        tree = ET.parse(f)\n        root = tree.getroot()\n        \n        spaces_found = 0\n        examples = []\n        \n        for row in root.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}row''):\n            row_num = int(row.get(''r'', ''0''))\n            if row_num > max_rows and len(examples) >= 5:\n                break\n                \n            for cell in row.findall(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}c''):\n                cell_ref = cell.get(''r'', '''')\n                cell_type = cell.get(''t'', '''')\n                \n                if ''A'' in cell_ref:  # Solo columna A (códigos)\n                    v_elem = cell.find(''.//{http://schemas.openxmlformats.org/spreadsheetml/2006/main}v'')\n                    if v_elem is not None and v_elem.text:\n                        if cell_type == ''s'':\n                            idx = int(v_elem.text)\n                            if idx < len(shared_strings):\n                                value = shared_strings[idx]\n                            else:\n                                continue\n                        else:\n                            value = v_elem.text\n                        \n                        # Verificar espacios al final\n                        if len(value) > 0 and len(value.rstrip()) < len(value):\n                            spaces_found += 1\n                            if len(examples) < 5:\n                                examples.append({\n                                    ''row'': row_num,\n                                    ''value'': repr(value),  # usar repr para ver espacios\n                                    ''trimmed'': repr(value.rstrip())\n                                })\n        \n        print(f''Códigos con espacios al final encontrados: {spaces_found}'')\n        if examples:\n            print(''\\nEjemplos:'')\n            for ex in examples:\n                print(f\"\"  Fila {ex[''row'']}: {ex[''value'']} -> {ex[''trimmed'']}\"\")\n\ntry:\n    with zipfile.ZipFile(xlsx_path, ''r'') as z:\n        shared_strings = get_shared_strings(z)\n        \n        # Solo verificar CIE_DESCRIPCION que es donde parece estar el problema\n        check_trailing_spaces(z, ''xl/worksheets/sheet1.xml'', shared_strings, ''CIE_DESCRIPCION'')\n        \nexcept Exception as e:\n    print(f''Error: {e}'')\n\")"
    ],
    "deny": []
  }
}